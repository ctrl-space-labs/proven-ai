
services:

  # --------------------------- DATABASE ---------------------------
  gendox-database:
    image: ctrlspacelabs/gendox-database:latest
    container_name: gendox-database
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    networks:
      - proven_ai_network
    expose:
      - "5432"
    ports:
      - "${DATABASE_PORT}:5432"
    healthcheck:
      test: psql -h localhost -p 5432 -U $DATABASE_USERNAME -d $DATABASE_NAME -t -c "SELECT * from gendox_core.flyway_schema_history" | grep . || exit 1
      interval: 10s
      timeout: 30s
      retries: 30
      start_period: 20s

# --------------------------- GENDOX Backend---------------------------
  gendox-core-api:
    image: ctrlspacelabs/gendox-core-api:latest
    container_name: gendox-core-api
    volumes:
      - ~/.aws/:/root/.aws:ro
    depends_on:
      gendox-database:
        condition: service_healthy
    env_file:
      - .env-local
    networks:
      - proven_ai_network
    ports:
      - "${GENDOX_BACKEND_PORT}:8080"
    restart: on-failure


# --------------------------- GENDOX Frontend---------------------------
  gendox-frontend:
    image: ctrlspacelabs/gendox-frontend:latest
    container_name: gendox-frontend
    environment:
      NEXT_PUBLIC_OIDC_AUTHORITY: ${NEXT_PUBLIC_GENDOX_OIDC_AUTHORITY}
      NEXT_PUBLIC_OIDC_CLIENT_ID: ${NEXT_PUBLIC_GENDOX_OIDC_CLIENT_ID}
      NEXT_PUBLIC_OIDC_REDIRECT_URI: ${NEXT_PUBLIC_GENDOX_OIDC_REDIRECT_URI}
      NEXT_PUBLIC_OIDC_POST_LOGOUT_REDIRECT_URI: ${NEXT_PUBLIC_GENDOX_OIDC_POST_LOGOUT_REDIRECT_URI}
      NEXT_PUBLIC_OIDC_SILENT_REDIRECT_URI: ${NEXT_PUBLIC_GENDOX_OIDC_SILENT_REDIRECT_URI}
      NEXT_PUBLIC_GENDOX_URL: ${NEXT_PUBLIC_GENDOX_BACKEND_URL}
      NEXT_PUBLIC_PROVEN_AI_URL: ${NEXT_PUBLIC_PROVEN_AI_FRONTEND_URL}
      NEXT_PUBLIC_PROVEN_AI_ENABLED: ${NEXT_PUBLIC_PROVEN_AI_ENABLED}
    ports:
      - "${GENDOX_FRONTEND_PORT}:80"
    networks:
      - proven_ai_network


# --------------------------- KEYCLOAK ---------------------------
  gendox-keycloak:
    image: ctrlspacelabs/gendox-keycloak:latest
    container_name: gendox-keycloak
    depends_on:
      gendox-database:
        condition: service_healthy
    env_file:
      - .env-local
    environment:
      KC_DB: ${DATABASE_NAME}
      KC_DB_URL: ${DATABASE_URL}
      KC_DB_USERNAME: ${DATABASE_USERNAME}
      KC_DB_PASSWORD: ${DATABASE_PASSWORD}
    entrypoint: [ ]
    command:
      - /bin/bash
      - -c
      - |
        # Check if the 'server' alias exists and delete it if present
        if keytool -list -keystore /opt/keycloak/conf/server.keystore -storepass "${KEYSTORE_PASSWORD}" -alias server > /dev/null 2>&1; then
          echo "Alias 'server' exists, deleting it.";
          keytool -delete -alias server -keystore /opt/keycloak/conf/server.keystore -storepass "${KEYSTORE_PASSWORD}";
        fi
        
        # Generate a new keystore and key pair
        echo "Generating new keystore and key pair." && \
        keytool -genkeypair \
          -storepass "${KEYSTORE_PASSWORD}" \
          -storetype PKCS12 \
          -keyalg RSA \
          -keysize 2048 \
          -dname "CN=localhost" \
          -alias server \
          -validity 365 \
          -ext SAN:c=DNS:localhost,IP:127.0.0.1 \
          -keystore /opt/keycloak/conf/server.keystore
        
        # Start Keycloak in development mode in the background
        echo 'Starting Keycloak...'
        /opt/keycloak/bin/kc.sh start-dev \
          --http-relative-path="${KEYCLOAK_HTTP_RELATIVE_PATH}" \
          --features=token-exchange \
          --hostname-strict=false \
          --https-key-store-file=/opt/keycloak/conf/server.keystore \
          --https-key-store-password "${KEYSTORE_PASSWORD}" \
          --spi-theme-static-max-age=600 \
          --spi-theme-cache-themes=true \
          --spi-theme-cache-templates=true &
        #wait && bash /opt/keycloak/custom-conf/gendox-local-init.sh
        
        KEYCLOAK_PID=\$!

        # Function to check if Keycloak is ready
        is_keycloak_ready() {
          #curl -s -k 'http://localhost:8080/realms/master' > /dev/null
          (echo > /dev/tcp/localhost/8080) >/dev/null 2>&1
        }

        # Wait until Keycloak is ready to accept connections
        echo 'Waiting for Keycloak to be ready...'
        until is_keycloak_ready; do
          echo 'Keycloak not ready yet. Retrying in 5 seconds...'
          sleep 5
        done

        echo 'Keycloak is ready. Running initialization script.'
        cd /opt/keycloak/custom-conf && bash gendox-local-init.sh

        # Wait for the Keycloak process to keep the container running
        wait \$KEYCLOAK_PID

    networks:
      - proven_ai_network
    ports:
      - "${KEYCLOAK_HTTPS_PORT}:8443"
      - "${KEYCLOAK_HTTP_PORT}:8080"
    volumes:
      - keycloak-data:/opt/keycloak/conf


# --------------------------- PROVEN AI Backend---------------------------
  proven-ai-backend:
    image: ctrlspacelabs/proven-ai-backend:latest
    container_name: proven-ai-backend
    depends_on:
      gendox-database:
        condition: service_healthy
    volumes:
      - ~/.aws/:/root/.aws:ro
      - ../../provenai-database:/provenai-database
    environment:
      DATABASE_URL: ${DATABASE_URL}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DEV_DATABASE_URL: ${DATABASE_URL}
      DEV_DATABASE_USERNAME: ${DATABASE_USERNAME}
      DEV_DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_PROVEN_AI_CLIENT_ID}
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_PROVEN_AI_CLIENT_SECRET}
      ISSUER_DID: ${ISSUER_DID}
      ISSUER_PRIVATE_JWK: ${ISSUER_PRIVATE_JWK}
    working_dir: /provenai-database
    networks:
      - proven_ai_network
    ports:
      - "${PROVEN_AI_BACKEND_PORT}:8082"
    restart: on-failure

# --------------------------- PROVEN AI Frontend---------------------------
  proven-ai-frontend:
    image: ctrlspacelabs/proven-ai-frontend:latest
    container_name: proven-ai-frontend
    environment:
      NEXT_PUBLIC_OIDC_AUTHORITY: ${NEXT_PUBLIC_PROVEN_AI_OIDC_AUTHORITY}
      NEXT_PUBLIC_OIDC_CLIENT_ID: ${NEXT_PUBLIC_PROVEN_AI_OIDC_CLIENT_ID}
      NEXT_PUBLIC_OIDC_REDIRECT_URI: ${NEXT_PUBLIC_PROVEN_AI_OIDC_REDIRECT_URI}
      NEXT_PUBLIC_OIDC_POST_LOGOUT_REDIRECT_URI: ${NEXT_PUBLIC_PROVEN_AI_OIDC_POST_LOGOUT_REDIRECT_URI}
      NEXT_PUBLIC_OIDC_SILENT_REDIRECT_URI: ${NEXT_PUBLIC_PROVEN_AI_OIDC_SILENT_REDIRECT_URI}
      NEXT_PUBLIC_GENDOX_URL: ${NEXT_PUBLIC_GENDOX_BACKEND_URL}
      NEXT_PUBLIC_GENDOX_FRONTEND_URL: ${NEXT_PUBLIC_GENDOX_FRONTEND_URL}
      NEXT_PUBLIC_PROVEN_AI_URL: ${NEXT_PUBLIC_PROVEN_AI_BACKEND_URL}
      NEXT_PUBLIC_VERIFIER_URL: ${NEXT_PUBLIC_VERIFIER_URL}
    ports:
      - "3001:80"
    networks:
      - proven_ai_network

# --------------------------- PROVEN AI SDK ---------------------------
  iscc-app:
    image: ghcr.io/iscc/iscc-web:main
    init: true
    env_file:
      - .env-local
    networks:
      - proven_ai_network
    restart: unless-stopped

  caddy:
    image: caddy:2.6.1-alpine
    container_name: caddy
    restart: unless-stopped
    env_file:
      - .env-local
    environment:
      - ISCC_SDK_GRANULAR=${ISCC_SDK_GRANULAR}
    volumes:
      - ../provenai-sdk-docker-compose/Caddyfile:/etc/caddy/Caddyfile
      - caddy-config:/config
      - caddy-data:/data
    ports:
      - target: "$ISCC_WEB_SITE_PORT"
        published: $ISCC_WEB_SITE_PORT # issuer-api
        protocol: tcp
        mode: host
      - target: "$ISSUER_API_PORT"
        published: $ISSUER_API_PORT # issuer-api
        protocol: tcp
        mode: host
      - target: "$VERIFIER_API_PORT"
        published: $VERIFIER_API_PORT # verifier-api
        protocol: tcp
        mode: host
    depends_on:
      - iscc-app
    networks:
      - proven_ai_network

  issuer-api:
    platform: linux/x86_64
    image: docker.io/waltid/issuer-api:${VERSION_TAG:-latest}
    pull_policy: always
    depends_on:
      - caddy
    env_file:
      - .env-local
    volumes:
      - ../provenai-sdk-docker-compose/issuer-api/config:/waltid-issuer-api/config
    networks:
      - proven_ai_network
    restart: unless-stopped

  verifier-api:
    platform: linux/x86_64
    image: docker.io/waltid/verifier-api:${VERSION_TAG:-latest}
    pull_policy: always
    depends_on:
      - caddy
    env_file:
      - .env-local
    volumes:
      - ../provenai-sdk-docker-compose/verifier-api/config:/waltid-verifier-api/config
    networks:
      - proven_ai_network
    restart: unless-stopped


# --------------------------- NETWORKS ---------------------------
networks:
  proven_ai_network:

# --------------------------- VOLUMES ---------------------------
volumes:
  postgres-data:
  keycloak-data:
  caddy-config:
  caddy-data:
